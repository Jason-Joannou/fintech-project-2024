name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  auto-format:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.create-branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install pip
        run: |
          python -m pip install --upgrade pip

      - name: Run Black
        run: |
          pip install black
          black .

      - name: Check for formatting changes
        id: git-status
        run: |
          git diff --exit-code || echo "Formatting changes detected"
          if [ -n "$(git diff)" ]; then echo "changed=true" >> $GITHUB_ENV; else echo "changed=false" >> $GITHUB_ENV; fi

      - name: Create and push formatting branch
        id: create-branch
        if: env.changed == 'true'
        run: |
          BRANCH_NAME="formatting-branch-${{ github.run_id }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Auto-format code"
          git push origin $BRANCH_NAME
          echo $BRANCH_NAME > branch_name.txt
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
          echo "::set-output name=branch::$BRANCH_NAME"  # Setting the output for branch

      - name: Upload branch name artifact
        if: env.changed == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: branch_name
          path: branch_name.txt

  lint-and-checks:
    needs: auto-format
    runs-on: ubuntu-latest
    if: needs.auto-format.outputs.branch != ''
    steps:
      - name: Download branch name artifact
        uses: actions/download-artifact@v3
        with:
          name: branch_name

      - name: Checkout formatted branch
        uses: actions/checkout@v3
        with:
          ref: ${{ env.branch_name }}

      - name: Verify checked out branch
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Checked out branch: $CURRENT_BRANCH"
          if [ "$CURRENT_BRANCH" != "${{ env.branch_name }}" ]; then
            echo "Error: Checked out branch ($CURRENT_BRANCH) does not match expected branch (${{ env.branch_name }})"
            exit 1
          fi

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8
        run: |
          pip install flake8
          flake8 .

      - name: Run Pylint
        run: |
          pip install pylint
          pylint **/*.py

      - name: Run Pyright
        run: |
          pip install pyright
          pyright

      - name: Run Pytest
        run: |
          pip install pytest
          pytest

  cleanup:
    needs: lint-and-checks
    runs-on: ubuntu-latest
    if: always()  # Always run the cleanup job
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Download branch name artifact
        uses: actions/download-artifact@v3
        with:
          name: branch_name

      - name: Read branch name
        id: read-branch
        run: |
          BRANCH_NAME=$(cat branch_name.txt)
          echo "Branch to delete: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Delete temporary branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git push origin --delete ${{ env.branch_name }} || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}